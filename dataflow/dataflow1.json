{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employeeDataSetForJoinDataflow",
						"type": "DatasetReference"
					},
					"name": "employeesource"
				},
				{
					"dataset": {
						"referenceName": "DepDataSetForDataFlow",
						"type": "DatasetReference"
					},
					"name": "DepDataSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "ITSink",
					"rejectedDataLinkedService": {
						"referenceName": "prashantstoragenew123",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "MechSink"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "SalesSink"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "otherSink"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPID as integer,",
				"          NAME as string,",
				"          AGE as short,",
				"          DID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employeesource",
				"source(output(",
				"          DepId as integer,",
				"          Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DepDataSource",
				"employeesource, DepDataSource join(DID == DepId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          EMPID,",
				"          NAME = employeesource@NAME,",
				"          AGE,",
				"          DID,",
				"          Name = DepDataSource@Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(equals(select1@Name,'IT'),",
				"     equals(select1@Name, 'Mech'),",
				"     equals(select1@Name, 'Sales'),",
				"     disjoint: false) ~> split1@(ITEMPLOYEE, MECHEmployee, Sales, Others)",
				"split1@ITEMPLOYEE sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ITEmployee'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ITSink",
				"split1@MECHEmployee sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['MechEmployee'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MechSink",
				"split1@Sales sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['SalesEmployee'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SalesSink",
				"split1@Others sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['OtherEmployee'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> otherSink"
			]
		}
	}
}